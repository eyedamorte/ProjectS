/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * Block list
 * OpenAPI spec version: 1.0.0
 */
import { createInstance } from './api-instance';
import type { BodyType } from './api-instance';
export interface SetInstrumentsDto {
  instruments: string[];
}

export interface InstrumentDto {
  id: number;
  name: string;
}

export interface CreateInstrumentDto {
  name: string;
}

export interface AccountDto {
  id: number;
  ownerId: number;
}

export interface PatchAccountDto {
  instrumentsList: string[];
}

export interface GetSessionInfoDto {
  email: number;
  exp: number;
  iat: number;
  id: number;
}

export interface SignInBodyDto {
  email: string;
  password: string;
}

export interface SignUpBodyDto {
  email: string;
  password: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const appControllerGetHello = (options?: SecondParameter<typeof createInstance>) => {
  return createInstance<void>({ url: `/`, method: 'GET' }, options);
};

export const authControllerSignUp = (
  signUpBodyDto: BodyType<SignUpBodyDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/sign-up`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: signUpBodyDto,
    },
    options,
  );
};

export const authControllerSignIn = (
  signInBodyDto: BodyType<SignInBodyDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/sign-in`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: signInBodyDto,
    },
    options,
  );
};

export const authControllerSignOut = (options?: SecondParameter<typeof createInstance>) => {
  return createInstance<void>({ url: `/auth/sign-out`, method: 'POST' }, options);
};

export const authControllerGetSessionInfo = (options?: SecondParameter<typeof createInstance>) => {
  return createInstance<GetSessionInfoDto>({ url: `/auth/session`, method: 'GET' }, options);
};

export const accountControllerGetAccount = (options?: SecondParameter<typeof createInstance>) => {
  return createInstance<void>({ url: `/account`, method: 'GET' }, options);
};

export const accountControllerPatchAccount = (
  patchAccountDto: BodyType<PatchAccountDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<AccountDto>(
    {
      url: `/account`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: patchAccountDto,
    },
    options,
  );
};

export const instrumentControllerCreateInstrument = (
  createInstrumentDto: BodyType<CreateInstrumentDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<InstrumentDto>(
    {
      url: `/instrument`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createInstrumentDto,
    },
    options,
  );
};

export const instrumentControllerGetInstrumentList = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<InstrumentDto[]>({ url: `/instrument`, method: 'GET' }, options);
};

export const instrumentControllerSetInstruments = (
  setInstrumentsDto: BodyType<SetInstrumentsDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/instrument/user-instruments`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: setInstrumentsDto,
    },
    options,
  );
};

export const instrumentControllerGetInstruments = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<InstrumentDto[]>(
    { url: `/instrument/user-instruments`, method: 'GET' },
    options,
  );
};

export type AppControllerGetHelloResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AuthControllerSignUpResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignUp>>
>;
export type AuthControllerSignInResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignIn>>
>;
export type AuthControllerSignOutResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignOut>>
>;
export type AuthControllerGetSessionInfoResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetSessionInfo>>
>;
export type AccountControllerGetAccountResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerGetAccount>>
>;
export type AccountControllerPatchAccountResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerPatchAccount>>
>;
export type InstrumentControllerCreateInstrumentResult = NonNullable<
  Awaited<ReturnType<typeof instrumentControllerCreateInstrument>>
>;
export type InstrumentControllerGetInstrumentListResult = NonNullable<
  Awaited<ReturnType<typeof instrumentControllerGetInstrumentList>>
>;
export type InstrumentControllerSetInstrumentsResult = NonNullable<
  Awaited<ReturnType<typeof instrumentControllerSetInstruments>>
>;
export type InstrumentControllerGetInstrumentsResult = NonNullable<
  Awaited<ReturnType<typeof instrumentControllerGetInstruments>>
>;
